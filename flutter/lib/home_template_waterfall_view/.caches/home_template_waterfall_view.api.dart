// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class HomeTemplateWaterfallViewConfig {
  HomeTemplateWaterfallViewConfig({
    this.categoryName,
    this.currentLocale,
    this.screenWidth,
    this.screenHeight,
  });

  String? categoryName;
  Map<Object?, Object?>? currentLocale;
  double? screenWidth;
  double? screenHeight;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['categoryName'] = categoryName;
    pigeonMap['currentLocale'] = currentLocale;
    pigeonMap['screenWidth'] = screenWidth;
    pigeonMap['screenHeight'] = screenHeight;
    return pigeonMap;
  }

  static HomeTemplateWaterfallViewConfig decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HomeTemplateWaterfallViewConfig(
      categoryName: pigeonMap['categoryName'] as String?,
      currentLocale: pigeonMap['currentLocale'] as Map<Object?, Object?>?,
      screenWidth: pigeonMap['screenWidth'] as double?,
      screenHeight: pigeonMap['screenHeight'] as double?,
    );
  }
}

class HomeTemplateWaterfallViewModel {
  HomeTemplateWaterfallViewModel({
    this.materialId,
    this.title,
    this.backgroundColor,
    this.type,
    this.templateType,
    this.imageUrl,
    this.imageWidth,
    this.imageHeight,
    this.schemeUrl,
    this.userOverRole,
    this.price,
    this.paymentTag,
    this.extData,
    this.isMarketAdvert,
  });

  int? materialId;
  String? title;
  String? backgroundColor;
  String? type;
  String? templateType;
  String? imageUrl;
  double? imageWidth;
  double? imageHeight;
  String? schemeUrl;
  int? userOverRole;
  int? price;
  String? paymentTag;
  Map<Object?, Object?>? extData;
  bool? isMarketAdvert;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['materialId'] = materialId;
    pigeonMap['title'] = title;
    pigeonMap['backgroundColor'] = backgroundColor;
    pigeonMap['type'] = type;
    pigeonMap['templateType'] = templateType;
    pigeonMap['imageUrl'] = imageUrl;
    pigeonMap['imageWidth'] = imageWidth;
    pigeonMap['imageHeight'] = imageHeight;
    pigeonMap['schemeUrl'] = schemeUrl;
    pigeonMap['userOverRole'] = userOverRole;
    pigeonMap['price'] = price;
    pigeonMap['paymentTag'] = paymentTag;
    pigeonMap['extData'] = extData;
    pigeonMap['isMarketAdvert'] = isMarketAdvert;
    return pigeonMap;
  }

  static HomeTemplateWaterfallViewModel decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HomeTemplateWaterfallViewModel(
      materialId: pigeonMap['materialId'] as int?,
      title: pigeonMap['title'] as String?,
      backgroundColor: pigeonMap['backgroundColor'] as String?,
      type: pigeonMap['type'] as String?,
      templateType: pigeonMap['templateType'] as String?,
      imageUrl: pigeonMap['imageUrl'] as String?,
      imageWidth: pigeonMap['imageWidth'] as double?,
      imageHeight: pigeonMap['imageHeight'] as double?,
      schemeUrl: pigeonMap['schemeUrl'] as String?,
      userOverRole: pigeonMap['userOverRole'] as int?,
      price: pigeonMap['price'] as int?,
      paymentTag: pigeonMap['paymentTag'] as String?,
      extData: pigeonMap['extData'] as Map<Object?, Object?>?,
      isMarketAdvert: pigeonMap['isMarketAdvert'] as bool?,
    );
  }
}

class _HomeTemplateWaterfallViewHostAPICodec extends StandardMessageCodec {
  const _HomeTemplateWaterfallViewHostAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HomeTemplateWaterfallViewConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is HomeTemplateWaterfallViewModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return HomeTemplateWaterfallViewConfig.decode(readValue(buffer)!);
      
      case 129:       
        return HomeTemplateWaterfallViewModel.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class HomeTemplateWaterfallViewHostAPI {
  /// Constructor for [HomeTemplateWaterfallViewHostAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HomeTemplateWaterfallViewHostAPI({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HomeTemplateWaterfallViewHostAPICodec();

  Future<void> windTrack(String arg_eventName, int arg_eventID, Map<Object?, Object?> arg_detailInfo) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HomeTemplateWaterfallViewHostAPI.windTrack', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_eventName, arg_eventID, arg_detailInfo]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> slsTrack(Map<Object?, Object?> arg_info) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HomeTemplateWaterfallViewHostAPI.slsTrack', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_info]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> handleRefresh() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HomeTemplateWaterfallViewHostAPI.handleRefresh', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> handleLoad() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HomeTemplateWaterfallViewHostAPI.handleLoad', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> handleOpenURL(String arg_url, Map<Object?, Object?> arg_parameters) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HomeTemplateWaterfallViewHostAPI.handleOpenURL', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_url, arg_parameters]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> handleScroll(double arg_scrollY) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HomeTemplateWaterfallViewHostAPI.handleScroll', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_scrollY]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _HomeTemplateWaterfallViewFlutterAPICodec extends StandardMessageCodec {
  const _HomeTemplateWaterfallViewFlutterAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HomeTemplateWaterfallViewConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is HomeTemplateWaterfallViewModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return HomeTemplateWaterfallViewConfig.decode(readValue(buffer)!);
      
      case 129:       
        return HomeTemplateWaterfallViewModel.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class HomeTemplateWaterfallViewFlutterAPI {
  static const MessageCodec<Object?> codec = _HomeTemplateWaterfallViewFlutterAPICodec();

  void config(HomeTemplateWaterfallViewConfig maker);
  void clear();
  void loadData(bool success, List<HomeTemplateWaterfallViewModel?> datas);
  void scrollTo(double scrollY, bool animate);
  void updateWindSupplementaryInfo(Map<String?, Object?> windSupplementaryInfo);
  static void setup(HomeTemplateWaterfallViewFlutterAPI? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.config', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.config was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final HomeTemplateWaterfallViewConfig? arg_maker = (args[0] as HomeTemplateWaterfallViewConfig?);
          assert(arg_maker != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.config was null, expected non-null HomeTemplateWaterfallViewConfig.');
          api.config(arg_maker!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.clear', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.clear();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.loadData', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.loadData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_success = (args[0] as bool?);
          assert(arg_success != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.loadData was null, expected non-null bool.');
          final List<HomeTemplateWaterfallViewModel?>? arg_datas = (args[1] as List<Object?>?)?.cast<HomeTemplateWaterfallViewModel?>();
          assert(arg_datas != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.loadData was null, expected non-null List<HomeTemplateWaterfallViewModel?>.');
          api.loadData(arg_success!, arg_datas!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.scrollTo', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.scrollTo was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_scrollY = (args[0] as double?);
          assert(arg_scrollY != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.scrollTo was null, expected non-null double.');
          final bool? arg_animate = (args[1] as bool?);
          assert(arg_animate != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.scrollTo was null, expected non-null bool.');
          api.scrollTo(arg_scrollY!, arg_animate!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.updateWindSupplementaryInfo', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.updateWindSupplementaryInfo was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String?, Object?>? arg_windSupplementaryInfo = (args[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
          assert(arg_windSupplementaryInfo != null, 'Argument for dev.flutter.pigeon.HomeTemplateWaterfallViewFlutterAPI.updateWindSupplementaryInfo was null, expected non-null Map<String?, Object?>.');
          api.updateWindSupplementaryInfo(arg_windSupplementaryInfo!);
          return;
        });
      }
    }
  }
}
